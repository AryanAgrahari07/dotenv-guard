name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test
    
    - name: Test CLI generation
      run: |
        echo "PORT=3000" > .env.test
        echo "DEBUG=true" >> .env.test
        echo "API_KEY=test123" >> .env.test
        npx . generate --env .env.test --schema .env.test.schema.json
        
    - name: Test CLI validation
      run: |
        PORT=3000 DEBUG=true API_KEY=test123 npx . validate --schema .env.test.schema.json
  
  integration:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test package installation
      run: npm pack
    
    - name: Create test project
      run: |
        mkdir test-project
        cd test-project
        npm init -y
        npm install ../dotenv-guard-*.tgz
        
        # Create sample .env
        echo "DATABASE_URL=postgres://localhost/test" > .env
        echo "API_KEY=secret123" >> .env
        echo "PORT=3000" >> .env
        echo "DEBUG=true" >> .env
        
        # Generate schema
        npx dotenv-guard generate
        
        # Validate
        npx dotenv-guard validate
        
        # Check files were created
        test -f .env.schema.json
        test -f .env.example
        
        echo "âœ… Integration test passed"